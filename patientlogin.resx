<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        /9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAoHBwkHBgoJCAkLCwoMDxkQDw4ODx4WFxIZJCAmJSMgIyIo
        LTkwKCo2KyIjMkQyNjs9QEBAJjBGS0U+Sjk/QD3/2wBDAQsLCw8NDx0QEB09KSMpPT09PT09PT09PT09
        PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT3/wAARCADcAYgDASIAAhEBAxEB/8QA
        HwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIh
        MUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVW
        V1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXG
        x8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQF
        BgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAV
        YnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOE
        hYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq
        8vP09fb3+Pn6/9oADAMBAAIRAxEAPwDgKBRRXaYC0opBTgKYgp3OaQDFO700JhSigU4CncVgFLSgcUuK
        dwsFOANIBTwKLhYADT1oAp4FFxWFXNPWkAp6ii4rDhTxmkAp4FFwsOXNPWkAp6rUtjsOHTrTx9aQCnha
        lsLBzS80oWnbaVx2Gc0YNP20baVwGHNMOamK0wrRcZCQaa2amK0xlppgQEGmnNSlaaVqkyWQMDTTmpit
        N21aZBFg01gal20hWncmxCQaQg1MVppXmi4WItvFN2+9TbOKTbSuOxXKmm7eOtWClMKUrlJEBU+tMKmr
        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
</value>
  </data>
</root>